# core/views.py
from django.shortcuts import render
from django.http import HttpResponse
from django.conf import settings
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
import json
import google.generativeai as genai

# Google AI-nı konfiqurasiya edirik
try:
    genai.configure(api_key=settings.GEMINI_API_KEY)
except AttributeError:
    # API açarı tapılmasa, xəta verməməsi üçün tədbir
    print("XƏBƏRDARLIQ: settings.py faylında GEMINI_API_KEY təyin edilməyib.")

def analyze_text_with_gemini(text):
    """
    Verilən mətni analiz etmək və strukturlaşdırılmış data çıxarmaq üçün
    Gemini modelinə sorğu göndərir.
    """
    # Süni zəka üçün təlimat (prompt) hazırlayırıq
    prompt = f"""
    Aşağıdakı mətni analiz et və məlumatları dəqiq şəkildə JSON formatında çıxar. 
    JSON açarları bunlar olmalıdır: "ad", "soyad", "ata_adi", "muraciet_qurum", "hadise_mezmunu", "mueyyen_edildi", "teklif".
    Əgər hər hansı bir məlumat mətndə yoxdursa, dəyərini boş string ("") olaraq təyin et.

    Mətn:
    ---
    {text}
    ---

    Nəticəni yalnız JSON formatında, heç bir əlavə şərh və ya işarə olmadan qaytar.
    """
    
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        
        # Cavabı təmizləyib JSON-a çeviririk
        cleaned_response = response.text.strip().replace('```json', '').replace('```', '')
        return json.loads(cleaned_response)
    except Exception as e:
        print(f"Gemini API ilə əlaqə xətası: {e}")
        return None

def upload_and_generate(request):
    if request.method == 'POST':
        user_input = request.POST.get('user_input', '')
        
        # Mətni analiz üçün Gemini-yə göndəririk
        data = analyze_text_with_gemini(user_input)
        
        if not data:
            # Əgər analiz baş tutmasa, istifadəçiyə xəta mesajı göstəririk
            error_message = "Mətni analiz etmək mümkün olmadı. API açarınızı və internet bağlantınızı yoxlayın."
            return render(request, 'upload.html', {'error': error_message})

        # Analizdən gələn məlumatları dəyişənlərə mənimsədirik
        ad = data.get('ad', '')
        soyad = data.get('soyad', '')
        ata_adi = data.get('ata_adi', '')
        vetendash_adi = f"{soyad} {ad} {ata_adi}".strip()
        
        # Word sənədini yaradırıq (Bu hissə əvvəlki kodla eynidir)
        doc = Document()
        # ... (Word sənədini doldurma məntiqi. Məlumatlar `data` lüğətindən götürülür)
        p_title = doc.add_paragraph()
        p_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        runner_title = p_title.add_run(f'Vətəndaş {vetendash_adi} müraciəti əsasında aparılmış xidməti təhqiqatın nəticəsinə dair')
        runner_title.bold = True
        
        doc.add_paragraph()
        p_arayish = doc.add_paragraph()
        p_arayish.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p_arayish.add_run('A R A Y I Ş').bold = True

        doc.add_paragraph()
        doc.add_paragraph(f"{data.get('hadise_mezmunu', '')} barədə vətəndaş {vetendash_adi} tərəfindən {data.get('muraciet_qurum', '')}-dan/-dən daxil olmuş müraciət əsasında...")
        
        doc.add_paragraph()
        p_mueyyen = doc.add_paragraph()
        p_mueyyen.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p_mueyyen.add_run('M Ü Ə Y Y Ə N    E D İ L D İ :').bold = True
        doc.add_paragraph(data.get('mueyyen_edildi', ''))

        doc.add_paragraph()
        p_teklif = doc.add_paragraph()
        p_teklif.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p_teklif.add_run('T ə k l İ f   e d İ r İ k:').bold = True
        doc.add_paragraph(f"1. {data.get('teklif', '')}", style='List Number')

        # Sənədi istifadəçiyə göndəririk
        file_stream = io.BytesIO()
        doc.save(file_stream)
        file_stream.seek(0)
        
        filename = f"Arayish_{soyad}_{ad}.docx" if soyad and ad else "Arayish.docx"
        response = HttpResponse(file_stream, content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document')
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        return response

    return render(request, 'upload.html')

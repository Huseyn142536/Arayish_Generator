# core/views.py
from django.shortcuts import render
from django.http import HttpResponse
from django.conf import settings
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
import json
import google.generativeai as genai
import pdfplumber  # Yeni əlavə etdiyimiz kitabxana

# Google AI konfiqurasiyası (əvvəlki kimi qalır)
try:
    genai.configure(api_key=settings.GEMINI_API_KEY)
except AttributeError:
    print("XƏBƏRDARLIQ: settings.py faylında GEMINI_API_KEY təyin edilməyib.")

def analyze_text_with_gemini(text):
    # Bu funksiya dəyişmədən qalır, çünki o, sadəcə mətn analiz edir
    prompt = f"""
    Aşağıdakı mətni analiz et və məlumatları dəqiq şəkildə JSON formatında çıxar. 
    JSON açarları bunlar olmalıdır: "ad", "soyad", "ata_adi", "muraciet_qurum", "hadise_mezmunu", "mueyyen_edildi", "teklif".
    Əgər hər hansı bir məlumat mətndə yoxdursa, dəyərini boş string ("") olaraq təyin et.

    Mətn:
    ---
    {text}
    ---

    Nəticəni yalnız JSON formatında, heç bir əlavə şərh və ya işarə olmadan qaytar.
    """
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        cleaned_response = response.text.strip().replace('```json', '').replace('```', '')
        return json.loads(cleaned_response)
    except Exception as e:
        print(f"Gemini API ilə əlaqə xətası: {e}")
        return None

def upload_and_generate(request):
    if request.method == 'POST':
        # Yüklənən bütün PDF fayllarını siyahı şəklində alırıq
        pdf_files = request.FILES.getlist('pdf_files')

        if not pdf_files:
            return render(request, 'upload.html', {'error': 'Zəhmət olmasa, PDF faylları seçin.'})

        combined_text = ""
        # Hər bir PDF faylını oxuyub mətnini birləşdiririk
        for pdf_file in pdf_files:
            try:
                with pdfplumber.open(pdf_file) as pdf:
                    for page in pdf.pages:
                        # Səhifədən mətni çıxarıb ümumi mətnə əlavə edirik
                        text = page.extract_text()
                        if text:
                            combined_text += text + "\n\n"
            except Exception as e:
                print(f"Fayl oxunarkən xəta baş verdi ({pdf_file.name}): {e}")
                return render(request, 'upload.html', {'error': f'{pdf_file.name} faylını oxumaq mümkün olmadı.'})
        
        if not combined_text.strip():
            return render(request, 'upload.html', {'error': 'Yüklənən PDF fayllarından heç bir mətn çıxarmaq mümkün olmadı. Faylların içi şəkil olmasın.'})

        # Birləşdirilmiş mətni analiz üçün Gemini-yə göndəririk
        data = analyze_text_with_gemini(combined_text)
        
        if not data:
            error_message = "Mətni analiz etmək mümkün olmadı. API açarınızı və internet bağlantınızı yoxlayın."
            return render(request, 'upload.html', {'error': error_message})

        # Analizdən gələn məlumatlarla Word sənədi yaradırıq
        ad = data.get('ad', '')
        soyad = data.get('soyad', '')
        ata_adi = data.get('ata_adi', '')
        vetendash_adi = f"{soyad} {ad} {ata_adi}".strip()
        
        doc = Document()
        # Word sənədini doldurma məntiqi (əvvəlki kimi qalır)
        p_title = doc.add_paragraph()
        p_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        runner_title = p_title.add_run(f'Vətəndaş {vetendash_adi} müraciəti əsasında aparılmış xidməti təhqiqatın nəticəsinə dair')
        runner_title.bold = True
        
        doc.add_paragraph()
        p_arayish = doc.add_paragraph()
        p_arayish.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p_arayish.add_run('A R A Y I Ş').bold = True

        doc.add_paragraph()
        doc.add_paragraph(f"{data.get('hadise_mezmunu', '')} barədə vətəndaş {vetendash_adi} tərəfindən {data.get('muraciet_qurum', '')}-dan/-dən daxil olmuş müraciət əsasında...")
        
        doc.add_paragraph()
        p_mueyyen = doc.add_paragraph()
        p_mueyyen.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p_mueyyen.add_run('M Ü Ə Y Y Ə N    E D İ L D İ :').bold = True
        doc.add_paragraph(data.get('mueyyen_edildi', ''))

        doc.add_paragraph()
        p_teklif = doc.add_paragraph()
        p_teklif.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p_teklif.add_run('T ə k l İ f   e d İ r İ k:').bold = True
        doc.add_paragraph(f"1. {data.get('teklif', '')}", style='List Number')

        # Sənədi istifadəçiyə göndəririk
        file_stream = io.BytesIO()
        doc.save(file_stream)
        file_stream.seek(0)
        
        filename = f"Arayish_{soyad}_{ad}.docx" if soyad and ad else "Umumi_Arayish.docx"
        response = HttpResponse(file_stream, content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document')
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        return response

    return render(request, 'upload.html')
